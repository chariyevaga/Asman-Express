openapi: 3.0.0
info:
  title: ASMAN TIGER API
  version: 2.0.1
  description: '**Asman** Tiger system API documentation.'
  contact:
    name: Agamyrat Chariyev
    email: agamyrat.chariyev@gmail.com
servers:
  - url: http://{host}:{port}/api
    variables:
      host:
        enum:
          - 10.10.8.27
          - localhost
        default: localhost
      port:
        default: '3001'
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  parameters:
    offsetParam:
      in: query
      name: offset
      description: The number of items to skip before starting to collect the result set
      schema:
        type: integer
        minimum: 0
    limitParam:
      in: query
      name: limit
      description: The numbers of items to return.
      schema:
        type: integer
        minimum: 1
        default: 20
  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              message:
                type: string
                example: Missing Authorization Header
    PathIdRequiredError:
      description: ID is required
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              message:
                type: string
                example: Id is required
    NotFoundError:
      description: '[Model] is not found'
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              message:
                type: string
                example: '[Model] is not found'
  schemas:
    bankInput:
      required:
        - code
        - date
        - divisionNr
        - transactions
      properties:
        code:
          type: string
          example: '~'
        date:
          type: string
          format: date
          example: '2022-04-21 13:57:12'
        divisionNr:
          type: integer
          example: 1
        specode:
          type: string
          example: ''
        employeeCode:
          type: string
          example: AGO
        projectCode:
          type: string
          example: ''
        description:
          type: string
          example: ''
        text:
          type: string
          description: More information
          example: ''
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/bankInputTransaction'
    bankInputTransaction:
      required:
        - bankAccountCode
        - clientCode
        - amount
        - currencyId
        - currencyRate
      properties:
        bankAccountCode:
          type: string
          example: 102TMTPOS1
        clientCode:
          type: string
          example: 333 MONA
        amount:
          type: number
          format: flaot
          example: 1000
        currencyId:
          type: integer
          example: 158
        currencyRate:
          type: number
          format: float
          example: 1
        description:
          type: string
          example: ''
        docNumber:
          type: string
          example: ''
        docTrack:
          type: string
          example: ''
        specode:
          type: string
          example: ''
        expense:
          type: object
          description: Expense for transactions. if `null` its mean no expense
          properties:
            type:
              type: string
              enum:
                - include
                - exclude
            amount:
              type: number
              format: flaot
            currencyId:
              type: integer
            currencyRate:
              example: 1
              type: number
              format: float
          example:
            type: include
            amount: 0
            currencyId: 158
            currencyRate: 1
    caseInput:
      required:
        - caseCode
        - number
        - code
        - date
        - clientCode
        - divisionNr
        - amount
        - currencyId
        - currencyRate
      properties:
        caseCode:
          type: string
        number:
          type: string
          description: Case fiche number
        code:
          type: string
        date:
          type: string
          format: date
        clientCode:
          type: string
        divisionNr:
          type: integer
        amount:
          type: number
          format: float
        currencyId:
          type: integer
        currencyRate:
          type: number
          format: float
        description:
          type: string
        text:
          type: string
        employeeCode:
          type: string
        docNumber:
          type: string
        specode:
          type: string
      example:
        caseCode: 101TMT01
        number: '~'
        code: '~'
        date: '2022-04-18 13:45:33'
        clientCode: 320TM.TMT0001
        divisionNr: 1
        amount: 1234.5
        currencyId: 158
        currencyRate: 1
        description: This is description
        text: More information about case input
        employeeCode: AGO
        docNumber: ''
        specode: ''
    salePostSchema:
      required:
        - code
        - date
        - clientCode
        - divisionNr
        - warehouseNr
      properties:
        code:
          type: string
          default: '~'
        date:
          type: string
          format: date
          default: '2022-04-14 14:15:44'
        clientCode:
          type: string
          default: 333 MONA
        divisionNr:
          type: integer
          default: 1
        warehouseNr:
          type: integer
          default: 11
        employeeCode:
          type: string
          description: SalesManCode - Satish eleman kodu
          example: ''
        docNumber:
          type: string
          description: Belge Numarasi
          example: ''
        docTrack:
          type: string
          description: Documan Izleme numarasi
          example: ''
        projectCode:
          type: string
          description: Proje kodu
          example: ''
        note1:
          type: string
          description: Detaylar>aciklama
          example: ''
        note2:
          type: string
          description: Detaylar>aciklama
          example: ''
        note3:
          type: string
          description: Detaylar>aciklama
          example: ''
        note4:
          type: string
          description: Detaylar>aciklama
          example: ''
        note5:
          type: string
          description: Detaylar>aciklama
          example: ''
        note6:
          type: string
          description: Detaylar>aciklama
          example: ''
        text:
          type: string
          description: Detaylar bilgi
          example: ''
        specode:
          type: string
          example: ''
        authCode:
          type: string
          description: Yetki kody
          example: ''
    saleItem:
      required:
        - type
        - code
        - quantity
        - unitCode
        - price
        - priceCurrencyId
        - priceCurrencyRate
      properties:
        type:
          type: integer
          default: 0
          description: >-
            Item type is 0 (0.Items, 1.Promotion, 2.Discounts, 3.Expenses,
            4.Services)
        code:
          type: string
          default: '100200300'
          description: Item Code
        unitCode:
          type: string
          default: ADET
          description: Item Unit Code
        quantity:
          type: number
          format: flaot
          default: 3
        price:
          type: number
          format: flaot
          default: 23.3
        priceCurrencyId:
          type: integer
          description: price Currency Id
          default: 158
        priceCurrencyRate:
          type: number
          format: flaot
          default: 1
          description: >
            if currency not TMT rate of TMT to currency EXP: if price  7 USD
            ```{price: 7, priceCurrencyId:1, priceCurrencyRate: 19.6}```
        description:
          type: string
          example: Line description
    salePromotion:
      required:
        - type
        - code
        - quantity
        - unitCode
        - price
        - priceCurrencyId
        - priceCurrencyRate
      properties:
        type:
          type: integer
          default: 1
          description: >-
            Promotion type is 1 (0.Items, 1.Promotion, 2.Discounts, 3.Expenses,
            4.Services)
        code:
          type: string
          default: '100200300'
          description: Item Code
        unitCode:
          type: string
          default: ADET
          description: Item Unit Code
        quantity:
          type: number
          format: flaot
          default: 1
        price:
          type: number
          format: flaot
          default: 15.4
        priceCurrencyId:
          type: integer
          description: price Currency Id
          default: 158
        priceCurrencyRate:
          type: number
          format: flaot
          default: 1
          description: >
            if currency not TMT rate of TMT to currency EXP: if price  7 USD
            ```{price: 7, priceCurrencyId:1, priceCurrencyRate: 19.6}```
        description:
          type: string
          example: Line description
    saleDiscount:
      required:
        - type
        - discount
      properties:
        type:
          type: integer
          default: 2
          description: >-
            Descount type is 2 (0.Items, 1.Promotion, 2.Discounts, 3.Expenses,
            4.Services)
        code:
          type: string
          default: IN01
          description: (discountCartds.type - 2)
        discount:
          type: object
          required:
            - type
            - value
          properties:
            type:
              type: string
              enum:
                - amount
                - percentage
              default: amount
            value:
              type: number
              format: float
              default: 20
              description: if type is amount then 20 TMT else 20%
        description:
          type: string
          example: Line description
    saleExpense:
      required:
        - type
        - expense
      properties:
        type:
          type: integer
          default: 3
          description: >-
            Descount type is 3 (0.Items, 1.Promotion, 2.Discounts, 3.Expenses,
            4.Services)
        code:
          type: string
          default: DOSTAVKA
          description: disocuntCartCode (discountCartds.type - 4)
        expense:
          type: object
          required:
            - type
            - value
          properties:
            type:
              type: string
              enum:
                - amount
                - percentage
              default: amount
            value:
              type: number
              format: float
              default: 20
              description: if type is amount then 20 TMT else 20%
        description:
          type: string
          example: Line description
    saleService:
      required:
        - type
        - quantity
        - unitCode
        - price
        - priceCurrencyId
        - priceCurrencyRate
      properties:
        type:
          type: integer
          default: 4
          description: >-
            Service type is 4 (0.Items, 1.Promotion, 2.Discounts, 3.Expenses,
            4.Services)
        code:
          type: string
          default: ARASSACYLYK
          description: Item Code
        unitCode:
          type: string
          default: ADET
          description: Item Unit Code
        quantity:
          type: number
          format: flaot
          default: 1
        price:
          type: number
          format: flaot
          default: 15.4
        priceCurrencyId:
          type: integer
          description: price Currency Id
          default: 158
        priceCurrencyRate:
          type: number
          format: flaot
          default: 1
          description: >
            if currency not TMT rate of TMT to currency EXP: if price  7 USD
            ```{price: 7, priceCurrencyId:1, priceCurrencyRate: 19.6}```
        description:
          type: string
          example: Line description
    attributes:
      type: object
      properties:
        id:
          type: integer
        attributeKeyId:
          type: integer
        code:
          type: string
        name:
          type: string
    attributeKeys:
      type: object
      properties:
        id:
          type: integer
        code:
          type: string
        name:
          type: string
        specode:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    attributeValues:
      type: object
      properties:
        id:
          type: integer
        attributeKeyId:
          type: integer
        code:
          type: string
        name:
          type: string
    banks:
      type: object
      required:
        - id
        - code
        - name
      properties:
        id:
          type: integer
          description: Primary key
        code:
          type: string
        name:
          type: string
        address:
          type: string
        address2:
          type: string
        city:
          type: string
        country:
          type: string
        postcode:
          type: string
        telNumber:
          type: string
        telNumber2:
          type: string
        email:
          type: string
        webAddress:
          type: string
        active:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    bankAccounts:
      type: object
      required:
        - id
        - code
        - name
      properties:
        id:
          type: integer
          description: Primary key
        code:
          type: string
        name:
          type: string
        accountNo:
          type: string
        specode:
          type: string
        active:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    barcodes:
      type: object
      required:
        - id
        - itemId
        - itemUnitId
        - unitId
        - barcode
      properties:
        id:
          type: integer
          description: Primary key
        itemId:
          type: integer
          description: Item Id. ForeigneKey itemId ***(barcodes.itemId = items.id)***
        itemUnitId:
          type: integer
          description: >-
            ItemUnits Id. ForeigneKey itemUnitId ***(barcodes.itemUnitId =
            itemUnits.id)***
        unitId:
          type: integer
          description: Unit Id. ForeigneKey unitId ***(barcodes.unitId = units.id)***
        lineNr:
          type: integer
          description: barcode order line
        barcode:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    brands:
      type: object
      required:
        - id
        - code
        - name
      properties:
        id:
          type: integer
          description: Primary key
        code:
          type: string
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    cases:
      type: object
      required:
        - id
        - code
        - name
        - currencyId
      properties:
        id:
          type: integer
          description: Primary key
        code:
          type: string
        name:
          type: string
        address:
          type: string
        address2:
          type: string
        divisionNr:
          type: integer
        currencyId:
          type: integer
        active:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    clients:
      type: object
      required:
        - id
        - code
        - name
      properties:
        id:
          type: integer
          description: Primary key
        code:
          type: string
        name:
          type: string
        name2:
          type: string
        active:
          type: boolean
        cardType:
          type: integer
          description: 1 - buyer, 2 - seller, 3 - buyer and seller
        eCode:
          type: string
        address:
          type: string
        address2:
          type: string
        district:
          type: string
        town:
          type: string
        city:
          type: string
        cityCode:
          type: string
        country:
          type: string
        countryCode:
          type: string
        phoneNumber:
          type: string
        phoneNumber2:
          type: string
        email:
          type: string
        email2:
          type: string
        email3:
          type: string
        incharge:
          type: string
        incharge2:
          type: string
        incharge3:
          type: string
        webAddress:
          type: string
        birthDate:
          type: string
          format: date
        exchangeRateType:
          type: integer
          description: Exchange Rate type (rate1, rate2 ...)
        discount:
          type: integer
        specode:
          type: string
        specode2:
          type: string
        specode3:
          type: string
        specode4:
          type: string
        specode5:
          type: string
        cyphcode:
          type: string
        cardNo:
          type: string
        guid:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    currencies:
      type: object
      required:
        - id
        - code
      properties:
        id:
          type: integer
          description: Primary key
        code:
          type: string
        name:
          type: string
        symbol:
          type: string
        activelyUsed:
          type: boolean
        lastRate1:
          type: number
          format: float
        lastRate2:
          type: number
          format: float
        lastRate3:
          type: number
          format: float
        lastRate4:
          type: number
          format: float
        lastRateDate:
          type: string
          format: date
    discountCards:
      type: object
      required:
        - id
        - code
        - name
        - unitId
      properties:
        id:
          type: integer
          description: Primary key
        code:
          type: string
        cyphcode:
          type: string
        specode:
          type: string
        name:
          type: string
        type:
          type: integer
          description: >-
            1. Buy Discount,  2. Sales Discount,  3. Purchase Expenses, 4. Sales
            Expenses
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    divisions:
      type: object
      required:
        - id
        - nr
        - name
      properties:
        id:
          type: integer
        nr:
          type: integer
          description: Division Number. Other models relation via divisions - ***nr***
        street:
          type: string
        doorNr:
          type: string
        district:
          type: string
        city:
          type: string
        country:
          type: string
        zipCode:
          type: string
        phone:
          type: string
    employees:
      type: object
      required:
        - id
        - code
        - name
      properties:
        id:
          type: integer
          description: Primary key
        code:
          type: string
        name:
          type: string
        phoneNumber:
          type: string
        specode:
          type: string
        active:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    exchanges:
      type: object
      required:
        - id
        - date
        - currencyId
      properties:
        id:
          type: integer
        date:
          type: string
          format: date
        currencyId:
          type: integer
          description: >-
            Currency Id. ForeigneKey *currencyId* **(currencies.id =
            exhcanges.currencyId)**
        rate1:
          type: number
          format: float
        rate2:
          type: number
          format: float
        rate3:
          type: number
          format: float
        rate4:
          type: number
          format: float
    items:
      type: object
      required:
        - code
        - active
        - name
      properties:
        id:
          type: integer
        code:
          type: string
          description: item code. (~ autogenerated)
          maxLength: 24
          example: null
        eCode:
          type: string
          description: item code. (~ autogenerated)
          maxLength: 24
          example: AD0012
        active:
          type: boolean
          example: true
          default: true
        eActive:
          type: boolean
        cardType:
          type: integer
          example: 1
        name:
          type: string
        name2:
          type: string
        name3:
          type: string
        name4:
          type: string
        specode1:
          type: string
        specode2:
          type: string
        specode3:
          type: string
        specode4:
          type: string
        specode5:
          type: string
        keyword1:
          type: string
        keyword2:
          type: string
        keyword3:
          type: string
        keyword4:
          type: string
        keyword5:
          type: string
        origin:
          type: string
        category:
          type: string
        mainUnit:
          type: string
        mainUnitId:
          type: integer
        brandId:
          type: integer
        variationCode:
          type: string
        reyonCode:
          type: string
        producerCode:
          type: string
        salesLimitQuantity:
          type: number
        status:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    itemAlternatives:
      type: object
      required:
        - id
        - itemId
        - alternativeItemId
      properties:
        id:
          type: integer
        itemId:
          type: integer
          description: items id
        alternativeItemId:
          type: integer
          description: alternative Items id
        lineNumber:
          type: integer
        priority:
          type: integer
        maxQuantity:
          type: number
          format: float
        minQuantity:
          type: number
          format: float
        beginDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        divisionNr:
          type: integer
    itemUnits:
      description: ItemUnits
      type: object
      required:
        - id
        - unitId
        - itemId
      properties:
        id:
          type: integer
        unitId:
          type: integer
        itemId:
          type: integer
        mainUnit:
          type: boolean
        lineNr:
          type: integer
        coefficient:
          type: number
          format: float
        eActive:
          type: boolean
        width:
          type: number
          format: float
        widthUnit:
          type: string
        length:
          type: number
          format: float
        lengthUnit:
          type: string
        height:
          type: number
          format: float
        heightUnit:
          type: string
        area:
          type: number
          format: float
        areaUnit:
          type: string
        volume:
          type: number
          format: float
        volumeUnit:
          type: string
        weight:
          type: number
          format: float
        weightUnit:
          type: string
        grossvolume:
          type: number
          format: float
        grossvolumeUnit:
          type: string
        grossweight:
          type: number
          format: float
        grossweightUnit:
          type: string
    prices:
      type: object
      required:
        - id
        - code
        - itemId
        - price
      properties:
        id:
          type: integer
        code:
          type: integer
        itemId:
          type: integer
        priority:
          type: integer
        clentcode:
          type: string
        clcyphcode:
          type: string
        clspecode:
          type: string
        clspecode2:
          type: string
        clspecode3:
          type: string
        clspecode4:
          type: string
        clspecode5:
          type: string
        active:
          type: boolean
        divisions:
          type: array
          items:
            type: integer
            description: division nr
        price:
          type: number
          format: float
        type:
          type: integer
          description: |
            Price Type: - 1. purchase price - 2. sale price
        unitId:
          type: integer
          description: Unit id
        currencyId:
          type: integer
          description: Price currency id
        beginTime:
          type: string
          format: date
          description: Price start date
        endTime:
          type: string
          format: date
          description: Price end date
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    serviceCards:
      type: object
      required:
        - id
        - code
        - name
        - unitId
      properties:
        id:
          type: integer
          description: Primary key
        code:
          type: string
        unitId:
          type: integer
        cyphcode:
          type: string
        specode:
          type: string
        specode2:
          type: string
        specode3:
          type: string
        specode4:
          type: string
        specode5:
          type: string
        name:
          type: string
        type:
          type: integer
          description: 1.service received, 2.service provided
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    stocks:
      type: object
      required:
        - itemId
        - warehouseNr
        - onhand
      properties:
        itemId:
          type: integer
        warehouseNr:
          type: integer
          description: Warehouses nr
        onhand:
          type: number
          format: float
          description: Item amount by warehouse
        reserved:
          type: number
          format: float
    units:
      type: object
      required:
        - id
        - code
        - unitSetId
        - name
      properties:
        id:
          type: integer
        code:
          type: string
        name:
          type: string
        unitSetId:
          type: integer
      example:
        id: 5
        code: MM
        name: Millimeter
    unitSets:
      type: object
      required:
        - id
        - code
        - name
      properties:
        id:
          type: integer
        code:
          type: string
        name:
          type: string
        specode:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    warehouses:
      type: object
      required:
        - id
        - nr
        - name
        - divisionNr
      properties:
        id:
          type: integer
        nr:
          type: integer
          description: Warehouse Number. Other models relation via divisions - ***nr***
        name:
          type: string
        divisionNr:
          type: integer
          description: >-
            Division Number.Warehouse belongsTo division.
            ForeignKey:*divisionNr* ***(warehouses.divisionNr = division.nr)***
        factoryNr:
          type: integer
        costGrp:
          type: integer
security:
  - basicAuth: []
paths:
  /v1:
    get:
      tags:
        - V1
      deprecated: true
      summary: All api/v1/endPoints deprecated. Use v2 end Points
      responses:
        '200':
          description: All api/v1/endPoints deprecated. Use v2 end Points
  /v2/attributeKeys:
    get:
      tags:
        - Attributes
      summary: List of attributeKeys
      description: Getting attributeKeys
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
        - in: query
          name: include
          description: attributeValues **Not Required**
          schema:
            type: string
            example: attributeValues
      responses:
        '200':
          description: attributKeys
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/attributeKeys'
                    - type: object
                      properties:
                        attributeValues:
                          type: array
                          items:
                            $ref: '#/components/schemas/attributeValues'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/attributes:
    get:
      tags:
        - Attributes
      summary: List of attributes
      description: Getting attributes
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
        - name: include
          in: query
          description: include attributeKey, attributeValue, item **Not Required**
          schema:
            type: array
            items:
              enum:
                - attributeKey
                - attributeValue
                - item
      responses:
        '200':
          description: attributes
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/attributes'
                    - type: object
                      properties:
                        attributeKey:
                          $ref: '#/components/schemas/attributeKeys'
                        attributeValue:
                          $ref: '#/components/schemas/attributeValues'
                        item:
                          $ref: '#/components/schemas/items'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/attributeValues:
    get:
      tags:
        - Attributes
      summary: List of attributeValues
      description: Getting attributeValues
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
        - in: query
          name: include
          description: include attributeKey **Not Required**
          schema:
            type: string
            example: attributeKey
      responses:
        '200':
          description: attributValues
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/attributeValues'
                    - type: object
                      properties:
                        attributeKey:
                          $ref: '#/components/schemas/attributeKeys'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/bankAccounts:
    get:
      tags:
        - Banks
      summary: List of bankAccounts
      description: Getting bankAccounts.
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
        - in: query
          name: include
          description: get bank and currency from bankAccounts. **Not required**
          schema:
            type: array
            items:
              enum:
                - bank
                - currency
      responses:
        '200':
          description: BankAccounts
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/bankAccounts'
                    - type: object
                      properties:
                        bank:
                          $ref: '#/components/schemas/banks'
                        currency:
                          $ref: '#/components/schemas/currencies'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/bankAccounts/{id}:
    get:
      tags:
        - Banks
      summary: BankAccount object
      description: Getting BankAccount Object by bank Id
      parameters:
        - in: path
          name: id
          description: Bank ID
          required: true
          schema:
            type: integer
        - in: query
          name: include
          description: get bank and currency from bankAccounts. **Not required**
          schema:
            type: array
            items:
              enum:
                - bank
                - currency
      responses:
        '200':
          description: BankAccounts
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/bankAccounts'
                  - type: object
                    properties:
                      bank:
                        $ref: '#/components/schemas/banks'
                      currency:
                        $ref: '#/components/schemas/currencies'
        '400':
          $ref: '#/components/responses/PathIdRequiredError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          description: Unexpected error in server side
  /v2/banks:
    get:
      tags:
        - Banks
      summary: List of banks
      description: Getting banks.
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
        - in: query
          name: include
          description: get bankAccounts from banks. **Not required**
          schema:
            example: bankAccounts
            type: string
      responses:
        '200':
          description: Banks
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/banks'
                    - type: object
                      properties:
                        bankAccounts:
                          type: array
                          items:
                            $ref: '#/components/schemas/bankAccounts'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/banks/{id}:
    get:
      tags:
        - Banks
      summary: Bank object
      description: Getting bank Object by bank Id
      parameters:
        - in: path
          name: id
          description: Bank ID
          required: true
          schema:
            type: integer
        - in: query
          name: include
          description: get bankAccounts from banks. **Not required**
          schema:
            example: bankAccounts
            type: string
      responses:
        '200':
          description: Banks
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/banks'
                  - type: object
                    properties:
                      bankAccounts:
                        type: array
                        items:
                          $ref: '#/components/schemas/bankAccounts'
        '400':
          $ref: '#/components/responses/PathIdRequiredError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          description: Unexpected error in server side
  /v2/banks/input:
    post:
      tags:
        - Banks
      summary: Input money bank
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bankInput'
      responses:
        '200':
          description: Saved
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/barcodes:
    get:
      tags:
        - Barcodes
      summary: List of barcodes
      description: Getting barcodes.
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
      responses:
        '200':
          description: Barcodes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/barcodes'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/barcodes/{data}:
    get:
      tags:
        - Barcodes
      summary: List of barcodes
      description: Getting barcodes.
      parameters:
        - in: query
          name: type
          required: true
          description: data type. (id or barcode)
          schema:
            type: string
            enum:
              - id
              - barcode
            default: barcode
        - in: path
          required: true
          name: data
          schema:
            type: string
          description: >-
            id (barcode.id = 6 - if type is id) or barcode (barcode.barcode =
            8699106167070 - if type is barcode)
          example: 8699106167070
        - in: query
          name: include
          description: include items, units **Not Required**
          schema:
            type: array
            items:
              type: string
              enum:
                - items
                - units
      responses:
        '200':
          description: Barcodes
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/barcodes'
                  - type: object
                    properties:
                      item:
                        $ref: '#/components/schemas/items'
                      itemUnit:
                        allOf:
                          - $ref: '#/components/schemas/itemUnits'
                          - type: object
                            properties:
                              unit:
                                $ref: '#/components/schemas/units'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          description: Unexpected error in server side
  /v2/barcodes/{data}/item:
    get:
      tags:
        - Barcodes
        - Items
      summary: Item by barcode
      description: Getting item by barcode data (id or barcode).
      parameters:
        - in: query
          name: type
          required: true
          description: data type. (id or barcode)
          schema:
            type: string
            enum:
              - id
              - barcode
            default: barcode
        - in: path
          required: true
          name: data
          schema:
            type: string
          description: id (barcode.id = 6) or barcode (barcode.barcode = 8699106167070)
          example: 8699106167070
      responses:
        '200':
          description: Barcodes
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/items'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          description: Unexpected error in server side
  /v2/barcodes/{data}/unit:
    get:
      tags:
        - Barcodes
        - Units
      summary: Unit by barcode
      description: Getting unit by barcode data (id or barcode).
      parameters:
        - in: query
          name: type
          required: true
          description: data type. (id or barcode)
          schema:
            type: string
            enum:
              - id
              - barcode
            default: barcode
        - in: path
          required: true
          name: data
          schema:
            type: string
          description: id (barcode.id = 6) or barcode (barcode.barcode = 8699106167070)
          example: 8699106167070
      responses:
        '200':
          description: Barcodes
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/itemUnits'
                  - type: object
                    properties:
                      unit:
                        $ref: '#/components/schemas/units'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          description: Unexpected error in server side
  /v2/barcodes/{data}/stocks:
    get:
      tags:
        - Barcodes
        - Stocks
      summary: Stocks by barcode
      description: Getting unit by barcode data (id or barcode).
      parameters:
        - in: query
          name: type
          required: true
          description: data type. (id or barcode)
          schema:
            type: string
            enum:
              - id
              - barcode
            default: barcode
        - in: path
          required: true
          name: data
          schema:
            type: string
          description: id (barcode.id = 6) or barcode (barcode.barcode = 8699106167070)
          example: 8699106167070
      responses:
        '200':
          description: Barcodes
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/stocks'
                  - type: object
                    properties:
                      unit:
                        $ref: '#/components/schemas/warehouses'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          description: Unexpected error in server side
  /v2/brands:
    get:
      tags:
        - Brands
      summary: List of brands
      description: Getting brands.
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
        - in: query
          name: include
          description: get items from brands. **Not required**
          schema:
            example: items
            type: string
      responses:
        '200':
          description: Brands
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/brands'
                    - type: object
                      properties:
                        items:
                          type: array
                          items:
                            $ref: '#/components/schemas/items'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/brands/{id}:
    get:
      tags:
        - Brands
      summary: Brand object
      description: Getting brand Object by brand Id
      parameters:
        - in: path
          name: id
          description: Brand ID
          required: true
          schema:
            type: integer
        - in: query
          name: include
          description: get items from brands. **Not required**
          schema:
            example: items
            type: string
      responses:
        '200':
          description: Brands
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/brands'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/items'
        '400':
          $ref: '#/components/responses/PathIdRequiredError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          description: Unexpected error in server side
  /v2/cases:
    get:
      tags:
        - Cases
      summary: List of cases
      description: Getting cases.
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
        - in: query
          name: include
          description: get division and currency from cases. **Not required**
          schema:
            type: array
            items:
              enum:
                - division
                - currency
      responses:
        '200':
          description: Cases
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/cases'
                    - type: object
                      properties:
                        division:
                          $ref: '#/components/schemas/divisions'
                        currency:
                          $ref: '#/components/schemas/currencies'
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/cases/{id}:
    get:
      tags:
        - Cases
      summary: Case object
      description: Getting case Object by case Id
      parameters:
        - in: path
          name: id
          description: Case ID
          required: true
          schema:
            type: integer
        - in: query
          name: include
          description: get division and currency from cases. **Not required**
          schema:
            type: array
            items:
              enum:
                - division
                - currency
      responses:
        '200':
          description: Cases
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/cases'
                  - type: object
                    properties:
                      division:
                        $ref: '#/components/schemas/divisions'
                      currency:
                        $ref: '#/components/schemas/currencies'
        '400':
          $ref: '#/components/responses/PathIdRequiredError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          description: Unexpected error in server side
  /v2/cases/input:
    post:
      tags:
        - Cases
      summary: Input money case
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/caseInput'
      responses:
        '200':
          description: Saved
        '400':
          $ref: '#/components/responses/PathIdRequiredError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/clients:
    get:
      tags:
        - Clients
      summary: List of clients
      description: Getting clients
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
      responses:
        '200':
          description: Clients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/clients'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/clients/{id}:
    get:
      tags:
        - Clients
      summary: Client Object by id
      description: Getting client by id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Client Id
      responses:
        '200':
          description: Clients
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/clients'
        '400':
          $ref: '#/components/responses/PathIdRequiredError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          description: Unexpected error in server side
  /v2/currencies:
    get:
      tags:
        - Currencies
      summary: List of currencies
      description: Getting currencies
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
      responses:
        '200':
          description: Currencies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/currencies'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/currencies/exchanges:
    get:
      tags:
        - Currencies
      summary: List of exchanges
      description: Getting exchanges
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
        - in: query
          name: include
          schema:
            type: string
          description: Include currency **Not Required**
          example: currency
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Get between startDate and endDate **Not Required**
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: Get between startDate and endDate **Not Required**
        - in: query
          name: currencyId
          schema:
            type: array
            items:
              type: integer
          description: filter by currencyId or currencyIds **Not Required**
          example:
            - 1
            - 2
            - 3
            - 4
            - 158
            - 159
            - 25
      responses:
        '200':
          description: Currencies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/exchanges'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/currencies/{id}:
    get:
      tags:
        - Currencies
      summary: Currency object by id
      description: Getting currency by id
      parameters:
        - in: path
          name: id
          required: true
          description: Currency Id
          schema:
            type: integer
            example: 158
      responses:
        '200':
          description: Currencies
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/currencies'
        '400':
          $ref: '#/components/responses/PathIdRequiredError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          description: Unexpected error in server side
  /v2/discountCards:
    get:
      tags:
        - DiscountCards
      summary: List of discountCards
      description: Getting discountCards.
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
        - in: query
          name: type
          schema:
            type: string
            enum:
              - buyDiscount
              - salesDiscount
              - purchaseCost
              - salesCost
      responses:
        '200':
          description: DiscountCards
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/discountCards'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/discountCards/{id}:
    get:
      tags:
        - DiscountCards
      summary: DiscountCard object
      description: Getting brand Object by brand Id
      parameters:
        - in: path
          name: id
          description: DiscountCard ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: DiscountCards
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discountCards'
        '400':
          $ref: '#/components/responses/PathIdRequiredError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          description: Unexpected error in server side
  /v2/divisions:
    get:
      tags:
        - Divisions
      summary: List of divisions
      description: Getting divisions.
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
        - in: query
          name: include
          description: get warehouses from divisions. **Not required**
          schema:
            example: warehouses
            type: string
      responses:
        '200':
          description: Divisions
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/divisions'
                    - type: object
                      properties:
                        warehouses:
                          type: array
                          items:
                            $ref: '#/components/schemas/warehouses'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/divisions/{id}:
    get:
      tags:
        - Divisions
      summary: Division object
      description: Getting division Object by division Id
      parameters:
        - in: path
          name: id
          description: Division ID
          required: true
          schema:
            type: integer
        - in: query
          name: include
          description: get warehouses from divisions. **Not required**
          schema:
            example: warehouses
            type: string
      responses:
        '200':
          description: Divisions
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/divisions'
                  - type: object
                    properties:
                      warehouses:
                        type: array
                        items:
                          $ref: '#/components/schemas/warehouses'
        '400':
          $ref: '#/components/responses/PathIdRequiredError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          description: Unexpected error in server side
  /v2/employees:
    get:
      tags:
        - Employees
      summary: List of employees
      description: Getting employees.
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
      responses:
        '200':
          description: Employees
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/employees'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/employees/{id}:
    get:
      tags:
        - Employees
      summary: Employee object
      description: Getting employee Object by employee Id
      parameters:
        - in: path
          name: id
          description: Employee ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Employees
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/employees'
        '400':
          $ref: '#/components/responses/PathIdRequiredError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          description: Unexpected error in server side
  /v2/itemAlternatives:
    get:
      tags:
        - Alternatives
      summary: List of itemAlternatives
      description: Getting itemAlternatives.
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
        - in: query
          name: include
          description: get items and alternative from itemAlternatives. **Not required**
          schema:
            type: array
            items:
              type: string
              enum:
                - item
                - alternative
      responses:
        '200':
          description: itemAlternatives
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/itemAlternatives'
                    - type: object
                      properties:
                        item:
                          $ref: '#/components/schemas/items'
                        alternative:
                          $ref: '#/components/schemas/items'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/itemAlternatives/{id}:
    get:
      tags:
        - Alternatives
      summary: alternative object
      description: Getting alternative Object by alternative Id
      parameters:
        - in: path
          name: id
          description: alternative ID
          required: true
          schema:
            type: integer
        - in: query
          name: include
          description: get items from itemAlternatives. **Not required**
          schema:
            type: array
            items:
              type: string
              enum:
                - item
                - alternative
      responses:
        '200':
          description: itemAlternatives
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/itemAlternatives'
                  - type: object
                    properties:
                      item:
                        $ref: '#/components/schemas/items'
                      alternative:
                        $ref: '#/components/schemas/items'
        '400':
          $ref: '#/components/responses/PathIdRequiredError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          description: Unexpected error in server side
  /v2/items:
    get:
      tags:
        - Items
        - Alternatives
      summary: List of items
      description: Getting items.
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
        - in: query
          name: orderName
          schema:
            type: string
            enum:
              - id
              - eCode
              - active
              - eActive
              - cardType
              - name
              - name2
              - name3
              - name4
              - specode1
              - specode2
              - specode3
              - specode4
              - specode5
              - keyword1
              - keyword2
              - keyword3
              - keyword4
              - keyword5
              - origin
              - category
              - mainUnit
              - mainUnitId
              - brandId
              - subsGoodCode
              - reyonCode
              - salesLimitQuantity
              - status
        - in: query
          name: orderType
          schema:
            type: string
            enum:
              - asc
              - desc
        - in: query
          name: include
          description: include brand, units, stocks, barcodes **Not Required**
          schema:
            type: array
            items:
              enum:
                - brand
                - units
                - stocks
                - barcodes
                - attributes
                - alternatives
      responses:
        '200':
          description: Items
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/items'
                    - type: object
                      properties:
                        brand:
                          $ref: '#/components/schemas/brands'
                        units:
                          type: array
                          items:
                            allOf:
                              - $ref: '#/components/schemas/units'
                              - type: object
                                properties:
                                  itemUnits:
                                    $ref: '#/components/schemas/itemUnits'
                        stocks:
                          type: array
                          items:
                            allOf:
                              - $ref: '#/components/schemas/stocks'
                              - type: object
                                properties:
                                  warehouse:
                                    $ref: '#/components/schemas/warehouses'
                        barcodes:
                          type: array
                          items:
                            $ref: '#/components/schemas/barcodes'
                        alternatives:
                          type: array
                          items:
                            $ref: '#/components/schemas/items'
                        attributes:
                          type: array
                          items:
                            allOf:
                              - $ref: '#/components/schemas/attributes'
                              - type: object
                                properties:
                                  attributeKey:
                                    $ref: '#/components/schemas/attributeKeys'
                                  attributeValue:
                                    $ref: '#/components/schemas/attributeValues'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
    post:
      tags:
        - Items
      summary: Create New Item
      description: In tiger create new item
      requestBody:
        description: new item data
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: item code. (~ autogenerated)
                  maxLength: 24
                  example: '~'
                  required: true
                eCode:
                  type: string
                  maxLength: 24
                  example: AD0012
                producerCode:
                  type: string
                  example: ''
                active:
                  type: boolean
                  example: true
                  default: true
                cardType:
                  type: integer
                  description: >-
                    1-Ticari mal, 2-Karma koli, 3-Depozitolu mal, 4-Sabit
                    kıymet, 10-Hammadde, 11-Yarımamul, 12-Mamul, 13-Tükletim
                    malı, 20-M.sınıfı (genel), 21-M.sınıfı (tablolu), 22-Firma
                    dosyaları oluşturulurken default olarak eklenen malzeme
                    sınıfı
                  example: 1
                  required: true
                name:
                  type: string
                  example: New TLI shirt
                  required: true
                name2:
                  type: string
                  example: ''
                name3:
                  type: string
                  example: ''
                name4:
                  type: string
                  example: ''
                specode1:
                  maxLength: 10
                  example: ''
                  type: string
                specode2:
                  maxLength: 10
                  example: ''
                  type: string
                specode3:
                  maxLength: 10
                  example: ''
                  type: string
                specode4:
                  maxLength: 10
                  example: ''
                  type: string
                specode5:
                  maxLength: 10
                  example: ''
                  type: string
                keyword1:
                  example: ''
                  type: string
                keyword2:
                  example: ''
                  type: string
                keyword3:
                  example: ''
                  type: string
                keyword4:
                  example: ''
                  type: string
                keyword5:
                  example: ''
                  type: string
                origin:
                  example: ''
                  type: string
                category:
                  example: ''
                  type: string
                unitSetCode:
                  type: string
                  required: true
                  example: '05'
                mainUnitCode:
                  type: string
                  example: ADET
                  required: true
                brandCode:
                  type: string
                  example: ''
                variationCode:
                  type: string
                reyonCode:
                  type: string
                salesLimitQuantity:
                  type: number
              required:
                - code
                - cardType
                - name
                - unitSetCode
                - mainUnitCode
      responses:
        '200':
          description: Prices
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/items'
        '400':
          $ref: '#/components/responses/PathIdRequiredError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/items/{id}:
    get:
      tags:
        - Items
        - Alternatives
      summary: List of items
      description: Getting items.
      parameters:
        - in: query
          name: include
          description: include brand, units, stocks, barcodes **Not Required**
          schema:
            type: array
            items:
              enum:
                - brand
                - units
                - stocks
                - barcodes
                - attributes
                - alternatives
        - in: path
          required: true
          name: id
          description: item id
          schema:
            type: integer
      responses:
        '200':
          description: Items
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/items'
                  - type: object
                    properties:
                      brand:
                        $ref: '#/components/schemas/brands'
                      units:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/units'
                            - type: object
                              properties:
                                itemUnits:
                                  $ref: '#/components/schemas/itemUnits'
                      stocks:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/stocks'
                            - type: object
                              properties:
                                warehouse:
                                  $ref: '#/components/schemas/warehouses'
                      barcodes:
                        type: array
                        items:
                          $ref: '#/components/schemas/barcodes'
                      alternatives:
                        type: array
                        items:
                          $ref: '#/components/schemas/items'
                      attributes:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/attributes'
                            - type: object
                              properties:
                                attributeKey:
                                  $ref: '#/components/schemas/attributeKeys'
                                attributeValue:
                                  $ref: '#/components/schemas/attributeValues'
        '400':
          $ref: '#/components/responses/PathIdRequiredError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          description: Unexpected error in server side
  /v2/items/{id}/barcodes:
    get:
      tags:
        - Items
        - Barcodes
      summary: List of barcodes
      description: Getting barcodes by item id.
      parameters:
        - in: query
          name: include
          description: include units **Not Required**
          schema:
            type: string
            example: unit
        - in: path
          required: true
          name: id
          description: item id
          schema:
            type: integer
      responses:
        '200':
          description: Divisions
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/barcodes'
                    - type: object
                      properties:
                        unit:
                          $ref: '#/components/schemas/units'
        '400':
          $ref: '#/components/responses/PathIdRequiredError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/items/{id}/stocks:
    get:
      tags:
        - Items
        - Stocks
      summary: List of stocks
      description: Getting stocks by item id.
      parameters:
        - in: query
          name: include
          description: include units **Not Required**
          schema:
            type: string
            example: warehouse
        - in: path
          required: true
          name: id
          description: item id
          schema:
            type: integer
      responses:
        '200':
          description: Divisions
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/stocks'
                    - type: object
                      properties:
                        warehouse:
                          $ref: '#/components/schemas/warehouses'
        '400':
          $ref: '#/components/responses/PathIdRequiredError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/items/{id}/units:
    get:
      tags:
        - Items
        - Units
      summary: List of units
      description: Getting units by item id.
      parameters:
        - in: query
          name: include
          description: include units **Not Required**
          schema:
            type: string
            example: barcodes
        - in: path
          required: true
          name: id
          description: item id
          schema:
            type: integer
      responses:
        '200':
          description: Units
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/itemUnits'
                    - type: object
                      properties:
                        unit:
                          $ref: '#/components/schemas/units'
                    - type: object
                      properties:
                        barcode:
                          $ref: '#/components/schemas/barcodes'
        '400':
          $ref: '#/components/responses/PathIdRequiredError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/items/{id}/prices:
    get:
      tags:
        - Prices
        - Items
      summary: List of prices
      description: Getting prices by item id.
      parameters:
        - in: query
          required: true
          name: type
          description: >-
            all, sale - only sale prices, actualtSale - only actual sale price,
            purchase - all purchase price, lastPurchase - last purchase prices
          schema:
            type: string
            enum:
              - all
              - sale
              - actualtSale
              - purchase
              - lastPurchase
        - in: path
          required: true
          name: id
          description: item id
          schema:
            type: integer
        - in: query
          name: include
          schema:
            type: array
            items:
              enum:
                - currency
                - unit
      responses:
        '200':
          description: Prices
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/prices'
                    - type: object
                      properties:
                        currency:
                          $ref: '#/components/schemas/currencies'
                        unit:
                          $ref: '#/components/schemas/units'
        '400':
          $ref: '#/components/responses/PathIdRequiredError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/itemUnits:
    get:
      tags:
        - Units
      summary: List of units
      description: Getting units
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
        - in: query
          name: include
          description: include items, barcode **Not Required**
          schema:
            type: array
            items:
              type: string
              enum:
                - item
                - unit
                - barcode
      responses:
        '200':
          description: Units
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/itemUnits'
                    - type: object
                      properties:
                        item:
                          $ref: '#/components/schemas/items'
                        barcode:
                          $ref: '#/components/schemas/barcodes'
                        unit:
                          $ref: '#/components/schemas/units'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/itemUnits/{id}:
    get:
      tags:
        - Units
      summary: List of units
      description: Getting units
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
        - in: path
          required: true
          name: id
          schema:
            type: integer
        - in: query
          name: include
          description: include items, barcode **Not Required**
          schema:
            type: array
            items:
              type: string
              enum:
                - item
                - unit
                - barcode
      responses:
        '200':
          description: Units
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/itemUnits'
                  - type: object
                    properties:
                      item:
                        $ref: '#/components/schemas/items'
                      barcode:
                        $ref: '#/components/schemas/barcodes'
                      unit:
                        $ref: '#/components/schemas/units'
        '400':
          $ref: '#/components/responses/PathIdRequiredError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          description: Unexpected error in server side
  /v2/prices:
    get:
      tags:
        - Prices
      summary: List of prices
      description: Getting prices by item id.
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
        - in: query
          required: true
          name: type
          description: >-
            all, sale - only sale prices, actualtSale - only actual sale price,
            purchase - all purchase price, lastPurchase - last purchase prices
          schema:
            type: string
            enum:
              - all
              - sale
              - actualtSale
              - purchase
              - lastPurchase
        - in: query
          name: include
          schema:
            type: array
            items:
              enum:
                - currency
                - unit
      responses:
        '200':
          description: Prices
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/prices'
                    - type: object
                      properties:
                        currency:
                          $ref: '#/components/schemas/currencies'
                        unit:
                          $ref: '#/components/schemas/units'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/prices/{id}:
    get:
      tags:
        - Prices
      summary: List of prices
      description: Getting prices by item id.
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
        - in: query
          name: include
          schema:
            type: array
            items:
              enum:
                - currency
                - unit
      responses:
        '200':
          description: Prices
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/prices'
                    - type: object
                      properties:
                        currency:
                          $ref: '#/components/schemas/currencies'
                        unit:
                          $ref: '#/components/schemas/units'
        '400':
          $ref: '#/components/responses/PathIdRequiredError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/prices/items/{id}:
    get:
      tags:
        - Prices
      summary: List of prices
      description: Getting prices by item id.
      parameters:
        - in: path
          description: item id
          required: true
          name: id
          schema:
            type: integer
        - in: query
          required: true
          name: type
          description: >-
            all, sale - only sale prices, actualtSale - only actual sale price,
            purchase - all purchase price, lastPurchase - last purchase prices
          schema:
            type: string
            enum:
              - all
              - sale
              - actualtSale
              - purchase
              - lastPurchase
        - in: query
          name: include
          schema:
            type: array
            items:
              enum:
                - currency
                - unit
      responses:
        '200':
          description: Prices
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/prices'
                    - type: object
                      properties:
                        currency:
                          $ref: '#/components/schemas/currencies'
                        unit:
                          $ref: '#/components/schemas/units'
        '400':
          $ref: '#/components/responses/PathIdRequiredError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/prices/barcodes/{barcode}:
    get:
      tags:
        - Prices
      summary: List of prices
      description: Getting prices by item id.
      parameters:
        - in: path
          description: Barcode
          required: true
          name: barcode
          schema:
            type: string
          example: 8699106167070
        - in: query
          required: true
          name: type
          description: >-
            all, sale - only sale prices, actualtSale - only actual sale price,
            purchase - all purchase price, lastPurchase - last purchase prices
          schema:
            type: string
            enum:
              - all
              - sale
              - actualtSale
              - purchase
              - lastPurchase
        - in: query
          name: include
          schema:
            type: array
            items:
              enum:
                - currency
                - unit
      responses:
        '200':
          description: Prices
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/prices'
                    - type: object
                      properties:
                        currency:
                          $ref: '#/components/schemas/currencies'
                        unit:
                          $ref: '#/components/schemas/units'
        '400':
          $ref: '#/components/responses/PathIdRequiredError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/sales:
    post:
      tags:
        - Sales
      summary: Create Sale Fiche
      description: Creating sale fiche
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/salePostSchema'
                - type: object
                  properties:
                    lines:
                      type: array
                      required: true
                      items:
                        anyOf:
                          - $ref: '#/components/schemas/saleItem'
                          - $ref: '#/components/schemas/salePromotion'
                          - $ref: '#/components/schemas/saleDiscount'
                          - $ref: '#/components/schemas/saleExpense'
                          - $ref: '#/components/schemas/saleService'
                    underLines:
                      type: array
                      required: true
                      items:
                        anyOf:
                          - $ref: '#/components/schemas/salePromotion'
                          - $ref: '#/components/schemas/saleDiscount'
                          - $ref: '#/components/schemas/saleExpense'
      responses:
        '200':
          description: Saved
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/serviceCards:
    get:
      tags:
        - ServiceCards
      summary: List of serviceCards
      description: Getting serviceCards.
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
        - in: query
          name: type
          schema:
            type: string
            enum:
              - receivedServices
              - providedServices
      responses:
        '200':
          description: ServiceCards
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/serviceCards'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/serviceCards/{id}:
    get:
      tags:
        - ServiceCards
      summary: ServiceCard object
      description: Getting brand Object by brand Id
      parameters:
        - in: path
          name: id
          description: ServiceCard ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ServiceCards
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceCards'
        '400':
          $ref: '#/components/responses/PathIdRequiredError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          description: Unexpected error in server side
  /v2/stocks:
    get:
      tags:
        - Stocks
      summary: List of stock
      description: Getting Stocks
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
        - in: query
          name: include
          description: include warehouse, item **Not Required**
          schema:
            type: array
            items:
              enum:
                - warehouse
                - item
      responses:
        '200':
          description: Stocks
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/stocks'
                    - type: object
                      properties:
                        item:
                          $ref: '#/components/schemas/items'
                        warehouse:
                          $ref: '#/components/schemas/warehouses'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/stocks/{data}:
    get:
      tags:
        - Stocks
      summary: List of stock
      description: Getting Stocks
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
        - in: path
          required: true
          name: data
          schema:
            type: integer
          description: data - id of item or nr of warehouse (by type)
        - in: query
          required: true
          name: type
          schema:
            type: string
            enum:
              - warehouseNr
              - itemId
        - in: query
          name: include
          description: include warehouse, item **Not Required**
          schema:
            type: array
            items:
              enum:
                - warehouse
                - item
      responses:
        '200':
          description: Stocks
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/stocks'
                    - type: object
                      properties:
                        item:
                          $ref: '#/components/schemas/items'
                        warehouse:
                          $ref: '#/components/schemas/warehouses'
        '400':
          description: Bad requrest
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    anyOf:
                      - example: Type most be itemId or warehousesNr
                      - example: Data is required
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/units:
    get:
      tags:
        - Units
      summary: List of units
      description: Getting units
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
        - in: query
          name: include
          description: include units **Not Required**
          schema:
            type: array
            items:
              enum:
                - unitSet
      responses:
        '200':
          description: Units
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/units'
                    - type: object
                      properties:
                        unitSet:
                          $ref: '#/components/schemas/unitSets'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/unitSets:
    get:
      tags:
        - Units
      summary: List of unitSets
      description: Getting unitSets
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
        - in: query
          name: include
          description: include units **Not Required**
          schema:
            type: array
            items:
              enum:
                - units
      responses:
        '200':
          description: Units
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/unitSets'
                    - type: object
                      properties:
                        units:
                          type: array
                          items:
                            $ref: '#/components/schemas/units'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/warehouses:
    get:
      tags:
        - Warehouses
      summary: List of warehouses
      description: Getting warehouses.
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
        - in: query
          name: include
          description: get division information. **Not required**
          schema:
            example: division
            type: string
      responses:
        '200':
          description: warehouses
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/warehouses'
                    - type: object
                      properties:
                        division:
                          $ref: '#/components/schemas/divisions'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Unexpected error in server side
  /v2/warehouses/{id}:
    get:
      tags:
        - Warehouses
      summary: Warehouse object
      description: Getting warehouse Object by warehouse Id
      parameters:
        - in: path
          name: id
          description: Warehouse ID
          required: true
          schema:
            type: integer
        - in: query
          name: include
          description: get division information. **Not required**
          schema:
            example: warehouses
            type: string
      responses:
        '200':
          description: Warehouses
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/warehouses'
                  - type: object
                    properties:
                      warehouses:
                        type: array
                        items:
                          $ref: '#/components/schemas/warehouses'
        '400':
          $ref: '#/components/responses/PathIdRequiredError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          description: Unexpected error in server side
tags:
  - name: V1
    description: Tiger API V1
  - name: Attributes
    description: All API's about item attributes
  - name: Banks
    description: All API's about banks
  - name: Barcodes
    description: All API's about barcodes
  - name: Brands
    description: All API's about brands
  - name: Cases
    description: All API's about cases
  - name: Clients
    description: All API's about cleints
  - name: Currencies
    description: All API's about currencies
  - name: DiscountCards
    description: All API's about discountCards
  - name: Divisions
    description: All API's about divisions
  - name: Employees
    description: All API's about employees
  - name: Alternatives
    description: All API's about itemAlternatives
  - name: ServiceCards
    description: All API's about serviceCards
  - name: Units
    description: All API's about units
  - name: Warehouses
    description: All API's about warehouses